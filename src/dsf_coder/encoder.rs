use std::io::{Read, Write};

use failure::{bail, Error};

use super::coding_loop::run_coding_loop;
use super::key::UnwindableKey;
use crate::errors::IOError;

const HEADER_DATA: &[u8] = &[
    0x44, 0x55, 0x4E, 0x45, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x20, 0x46, 0x49, 0x4C,
    0x45, 0x00, 0x38, 0x36, 0x36, 0x37, 0x33, 0x36, 0x38, 0x37, 0x00, 0x35, 0x34, 0x31, 0x33, 0x39,
    0x32, 0x36, 0x32, 0x00, 0x35, 0x33, 0x31, 0x35, 0x31, 0x34, 0x38, 0x37, 0x00, 0x35, 0x30, 0x38,
    0x35, 0x32, 0x35, 0x33, 0x38, 0x00, 0x33, 0x38, 0x31, 0x35, 0x35, 0x33, 0x31, 0x30, 0x00, 0x39,
    0x30, 0x34, 0x37, 0x34, 0x36, 0x38, 0x00, 0x34, 0x36, 0x39, 0x33, 0x35, 0x31, 0x30, 0x34, 0x00,
    0x36, 0x34, 0x36, 0x35, 0x38, 0x34, 0x36, 0x31, 0x00, 0x36, 0x34, 0x30, 0x30, 0x37, 0x32, 0x30,
    0x38, 0x00, 0x39, 0x33, 0x35, 0x35, 0x36, 0x37, 0x33, 0x37, 0x00, 0x38, 0x38, 0x34, 0x37, 0x38,
    0x35, 0x35, 0x36, 0x00, 0x36, 0x31, 0x39, 0x35, 0x39, 0x31, 0x35, 0x00, 0x36, 0x37, 0x37, 0x38,
    0x38, 0x33, 0x00, 0x39, 0x38, 0x35, 0x31, 0x30, 0x37, 0x31, 0x00, 0x38, 0x32, 0x35, 0x38, 0x39,
    0x38, 0x38, 0x34, 0x00, 0x38, 0x31, 0x39, 0x35, 0x33, 0x32, 0x34, 0x35, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1D, 0x25, 0x7A, 0xE4, 0x27, 0xFF, 0xE9, 0x8C, 0x58, 0x0A, 0x8B, 0x18, 0x70, 0xBB, 0xF2, 0x87,
    0x3A, 0xF2, 0x41, 0x68, 0x9E, 0x81, 0x85, 0xC6, 0x82, 0xE1, 0x92, 0x7D, 0xA0, 0x4E, 0x5B, 0xBD,
    0x73, 0xD5, 0xA1, 0x9A, 0xD4, 0x8A, 0x27, 0x2C, 0x95, 0xB2, 0x44, 0x05, 0x6D, 0x37, 0x8C, 0xA7,
    0x29, 0xCE, 0x0F, 0xC7, 0x4F, 0x94, 0x8E, 0xD2, 0x75, 0x20, 0x4F, 0x15, 0x6E, 0xAA, 0xD3, 0xE1,
    0x7F,
];

fn encode_chunk(size: usize, key_storage: &mut impl UnwindableKey, buffer: &mut Vec<u8>) {
    let half_size = size >> 1;

    key_storage.unwind(half_size % key_storage.len());

    for byte in buffer.iter_mut().take(size).skip(half_size) {
        *byte ^= key_storage.next_key();
    }

    key_storage.unwind(0);

    for idx in 0..half_size {
        buffer[idx] ^= buffer[idx + half_size] ^ key_storage.next_key();
    }
}

pub fn encode<R, W, K>(
    input: &mut R,
    output: &mut W,
    key_storage: &mut K,
    buffer: &mut Vec<u8>,
) -> Result<(), Error>
where
    R: Read,
    W: Write,
    K: UnwindableKey,
{
    if let Err(io_err) = output.write_all(&HEADER_DATA) {
        bail!(IOError::OutputFileWrite { context: io_err });
    }

    run_coding_loop(input, output, key_storage, buffer, encode_chunk)?;

    Ok(())
}
